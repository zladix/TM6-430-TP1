/* * ATM Example system - file Transaction.java    * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.atm;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.banking.Balances;import edu.gordon.banking.Card;import edu.gordon.banking.Message;import edu.gordon.banking.Receipt;import edu.gordon.banking.Status;/** Abstract base class for classes representing the various kinds of *  transaction the ATM can perform */public abstract class Transaction{    /** Constructor     *     *  @param edu.gordon.atm the ATM used to communicate with customer     *  @param session the session in which this transaction is being performed     *  @param card the customer's card     *  @param pin the PIN entered by the customer     */         protected Transaction(ATM atm, Session session, Card card, int pin)    {        this.atm = atm;        this.session = session;        this.card = card;        this.pin = pin;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();                state = GETTING_SPECIFICS_STATE;    }                         /** Perform the Invalid PIN Extension - reset session pin to new value if successful     *     *  @return status code returned by bank from most recent re-submission     *          of transaction     *  @exception CustomerConsole.Cancelled if customer presses the CANCEL key     *             instead of re-entering PIN     *  @exception CardRetained if card was retained due to too many invalid PIN's     */    public Status performInvalidPINExtension() throws CustomerConsole.Cancelled,                                                      CardRetained    {        Status status = null;        for (int i = 0; i < 3; i ++)        {            pin = atm.getCustomerConsole().readPIN(                "PIN was incorrect\nPlease re-enter your PIN\n" +                "Then press ENTER");            atm.getCustomerConsole().display("");                        message.setPIN(pin);            status = atm.getNetworkToBank().sendMessage(message, balances);            if (! status.isInvalidPIN())            {                session.setPIN(pin);                return status;            }        }                atm.getCardReader().retainCard();        atm.getCustomerConsole().display(            "Your card has been retained\nPlease contact the bank.");        try        {            Thread.sleep(5000);        }        catch(InterruptedException e)        { }        atm.getCustomerConsole().display("");                        throw new CardRetained();    }        /** Get serial number of this transaction     *     *  @return serial number     */    public int getSerialNumber()    {        return serialNumber;    }        /** Get specifics for the transaction from the customer - each     *  subclass must implement this appropriately.     *     *  @return message to bank for initiating this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    protected abstract Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled;        /** Complete an approved transaction  - each subclass must implement     *  this appropriately.     *     *  @return receipt to be printed for this transaction     *  @exception CustomerConsole.Cancelled if customer cancelled this transaction     */    protected abstract Receipt completeTransaction() throws CustomerConsole.Cancelled;            // Local class representing card retained exception           /** Exception that is thrown when the customer's card is retained due to too     *  many invalid PIN entries     */    public static class CardRetained extends Exception    {        /** Constructor         */        public CardRetained()        {            super("Card retained due to too many invalid PINs");        }    }            // Instance variables    /** ATM to use for communication with the customer     */    protected ATM atm;        /** Session in which this transaction is being performed     */    protected Session session;        /** Customer card for the session this transaction is part of     */    protected Card card;        /** PIN entered or re-entered by customer     */    protected int pin;        /** Serial number of this transaction     */    protected int serialNumber;        /** Message to bank describing this transaction     */    protected Message message;        /** Used to return account balances from the bank     */    protected Balances balances;        /** List of available transaction types to display as a menu     */    private static final String [] TRANSACTION_TYPES_MENU =         { "Withdrawal", "Deposit", "Transfer", "Balance Inquiry" };            /** Next serial number - used to assign a unique serial number to     *  each transaction     */    private static int nextSerialNumber = 1;        /** The current state of the transaction     */    private int state;        // Possible values for state    private static final int GETTING_SPECIFICS_STATE = 1;    }